// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using senai.hroads.webApi.Context;

namespace senai.hroads.webApi.Migrations
{
    [DbContext(typeof(HRoadsContext))]
    partial class HRoadsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("senai.hroads.webApi.Domains.Classe", b =>
                {
                    b.Property<int>("idClasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nomeClasse")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("idClasse");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.Habilidade", b =>
                {
                    b.Property<int>("idHabilidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idTipoHabilidade")
                        .HasColumnType("int");

                    b.Property<string>("nomeHabilidade")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.HasKey("idHabilidade");

                    b.HasIndex("idTipoHabilidade");

                    b.ToTable("Habilidades");
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.InfoClasse", b =>
                {
                    b.Property<int>("infoClasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("idClasse")
                        .HasColumnType("int");

                    b.Property<int>("idHabilidade")
                        .HasColumnType("int");

                    b.HasKey("infoClasse");

                    b.HasIndex("idClasse");

                    b.HasIndex("idHabilidade");

                    b.ToTable("InfoClasse");
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.Personagem", b =>
                {
                    b.Property<int>("idPersonagem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nomePersonagem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idPersonagem");

                    b.ToTable("Personagens");
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.TipoHabilidade", b =>
                {
                    b.Property<int>("idTipoHabilidade")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("nomeTipoHabilidade")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("idTipoHabilidade");

                    b.ToTable("TipoHabilidade");
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.TipoUsuario", b =>
                {
                    b.Property<int>("idTipoUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("titulo")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.HasKey("idTipoUsuario");

                    b.ToTable("TipoUsuario");

                    b.HasData(
                        new
                        {
                            idTipoUsuario = 2,
                            titulo = "Administrador"
                        },
                        new
                        {
                            idTipoUsuario = 4,
                            titulo = "Cliente"
                        });
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.Usuario", b =>
                {
                    b.Property<int>("idUsuarios")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("varchar(150)");

                    b.Property<int>("idTipoUsuario")
                        .HasColumnType("int");

                    b.Property<string>("senha")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("idUsuarios");

                    b.HasIndex("idTipoUsuario");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            idUsuarios = 1,
                            email = "admin@admin.com",
                            idTipoUsuario = 2,
                            senha = "admin"
                        },
                        new
                        {
                            idUsuarios = 2,
                            email = "cliente@cliente.com",
                            idTipoUsuario = 4,
                            senha = "cliente"
                        });
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.Habilidade", b =>
                {
                    b.HasOne("senai.hroads.webApi.Domains.TipoHabilidade", "tipoHabilidade")
                        .WithMany()
                        .HasForeignKey("idTipoHabilidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipoHabilidade");
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.InfoClasse", b =>
                {
                    b.HasOne("senai.hroads.webApi.Domains.Classe", "classe")
                        .WithMany()
                        .HasForeignKey("idClasse")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("senai.hroads.webApi.Domains.Habilidade", "habilidade")
                        .WithMany()
                        .HasForeignKey("idHabilidade")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("classe");

                    b.Navigation("habilidade");
                });

            modelBuilder.Entity("senai.hroads.webApi.Domains.Usuario", b =>
                {
                    b.HasOne("senai.hroads.webApi.Domains.TipoUsuario", "tipoUsuario")
                        .WithMany()
                        .HasForeignKey("idTipoUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tipoUsuario");
                });
#pragma warning restore 612, 618
        }
    }
}
